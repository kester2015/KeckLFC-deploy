#!/usr/bin/env python3
import sys
import signal
import threading
import time

import Ice
import CombIce  # Generated by Ice.loadSlice

import tkinter as tk
from tkinter import ttk
from datetime import datetime
from collections import deque

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

# ----------------------------------------------------------------------
# 1) ICE Server section (unchanged)
# ----------------------------------------------------------------------
Ice.loadSlice('KtlIce.ice')

from KeckLFC import KeckLFC, parse_xml  # Assume these are in your PYTHONPATH

icetest_mode = False
use_mock    = False

class LfcI(CombIce.Lfc):
    def __init__(self):
        if icetest_mode:
            names, types = parse_xml('testLFC.xml.sin')
        else:
            names, types = parse_xml('LFC.xml.sin')
        self.keyword_names = names
        self.mkl = KeckLFC() if not use_mock else mockKeckLFC()
        print("[ICE] Server initialized")

    def modifiedkeyword(self, name, value, current):
        # Write operation invoked by dispatcher
        self.mkl[name] = value
        print(f"[ICE] Keyword write: {name} <- {value}")

    def receive(self, name, current):
        # Read operation invoked by dispatcher
        return str(self.mkl[name])

    def keylist(self, current):
        return self.keyword_names

    def cleanup(self, current):
        print("[ICE] cleanup")

    def shutdown(self, current):
        current.adapter.getCommunicator().shutdown()

def run_ice_server():
    with Ice.initialize(sys.argv, 'config.server') as communicator:
        signal.signal(signal.SIGINT, lambda *args: communicator.shutdown())
        adapter = communicator.createObjectAdapter("Lfc")
        adapter.add(LfcI(), Ice.stringToIdentity("lfc"))
        adapter.activate()
        print("[ICE] Adapter activated")
        communicator.waitForShutdown()
        print("[ICE] Server shutdown")

# ----------------------------------------------------------------------
# 2) GUI section: Interact with dispatcher via ICE proxy
# ----------------------------------------------------------------------
class LfcMonitorGUI:
    def __init__(self, root, lfc_prx, client_comm):
        self.root        = root
        self.lfc_prx     = lfc_prx
        self.client_comm = client_comm

        self.pending_action    = None
        self.first_update_done = False
        self.log_lines         = deque(maxlen=10)

        root.title("LFC STATUS and CONTROL")
        root.geometry("1280x900")

        frame = ttk.Frame(root, padding=10)
        frame.grid(sticky="nsew")
        frame.columnconfigure(2, weight=1)

        # -- Left: Device control --
        btn_frame = ttk.LabelFrame(frame, text="Device control", padding=8)
        btn_frame.grid(row=0, column=0, sticky="nw", padx=(0,10))
        self.control_buttons = []
        btn_texts = ["LFC OFF", "LFC ON", "LFC STANDBY", "LFC FULL COMB"]
        actions   = ["LFC_OFF", "LFC_ON", "LFC_STANDBY", "LFC_FULL_COMB"]
        for i, act in enumerate(actions):
            b = ttk.Button(
                btn_frame,
                text=btn_texts[i],
                command=lambda a=act: self.request_action(a),
                state="disabled"
            )
            b.grid(row=i, column=0, sticky="ew", pady=(0,5))
            self.control_buttons.append(b)

        # -- Center: Status monitor --
        status_frame = ttk.LabelFrame(frame, text="Status monitor", padding=8)
        status_frame.grid(row=0, column=1, sticky="nsew")
        status_frame.columnconfigure(1, weight=1)

        ttk.Label(status_frame, text="Current Status:")\
            .grid(row=0, column=0, sticky="w")
        self.current_status_label = ttk.Label(status_frame, text="--")
        self.current_status_label.grid(row=0, column=1, sticky="w")

        self.status_items = [
            ("LFC_TEMP_MONITOR",   "TEMP monitor"),
            ("LFC_RFOSCI_MONITOR", "RF Oscillator"),
            ("AMPLIFIER_MONITOR",  "Amplifier Monitor"),
            ("INTERLOCK_MONITOR",  "Interlock Monitor"),
        ]
        self.indicator_ids = {}
        for idx, (kw, txt) in enumerate(self.status_items, start=1):
            ttk.Label(status_frame, text=txt + ":")\
                .grid(row=idx, column=0, sticky="w")
            c = tk.Canvas(status_frame, width=20, height=20, highlightthickness=0)
            oval = c.create_oval(2, 2, 18, 18, fill="gray")
            c.grid(row=idx, column=1, sticky="w", padx=5)
            self.indicator_ids[kw] = (c, oval)

        idx += 1
        ttk.Label(status_frame, text="Repetition Rate:")\
            .grid(row=idx, column=0, sticky="w")
        self.rr_label = ttk.Label(status_frame, text="-- GHz")
        self.rr_label.grid(row=idx, column=1, sticky="w")

        idx += 1
        ttk.Label(status_frame, text="Last Update:")\
            .grid(row=idx, column=0, sticky="w")
        self.last_update_label = tk.Label(
            status_frame, text="--", fg="red"
        )
        self.last_update_label.grid(row=idx, column=1, sticky="w")

        idx += 1
        ttk.Label(status_frame, text="MiniComb Trace:")\
            .grid(row=idx, column=0, sticky="nw")
        self.trace_frame = ttk.Frame(status_frame)
        self.trace_frame.grid(row=idx, column=1, sticky="nsew")
        status_frame.rowconfigure(idx, weight=1)

        # -- Right: Confirm & Log --
        confirm_frame = ttk.LabelFrame(frame, text="Confirm", padding=8)
        confirm_frame.grid(row=0, column=2, sticky="ne", padx=(10,0))
        self.confirm_label = ttk.Label(confirm_frame, text="")
        self.confirm_label.grid(row=0, column=0, columnspan=2)

        self.yes_button = ttk.Button(
            confirm_frame, text="Yes",
            command=self.execute_action, state="disabled"
        )
        self.yes_button.grid(row=1, column=0, padx=(0,5))
        self.no_button = ttk.Button(
            confirm_frame, text="No",
            command=self.cancel_action, state="disabled"
        )
        self.no_button.grid(row=1, column=1)

        self.log_listbox = tk.Listbox(
            confirm_frame, height=10, width=50
        )
        self.log_listbox.grid(row=2, column=0, columnspan=2, pady=(10,0))

        # Style
        style = ttk.Style()
        style.configure("TButton", padding=4)

        # Start periodic update
        self.poll_interval = 5000  # milliseconds
        root.after(self.poll_interval, self.update_indicators)

    def request_action(self, name):
        # Disable buttons, awaiting confirmation
        for b in self.control_buttons:
            b.config(state="disabled")
        self.pending_action = name
        self.confirm_label.config(text=f"Confirm {name}?")
        self.yes_button.config(state="normal")
        self.no_button.config(state="normal")

    def execute_action(self):
        name = self.pending_action
        ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self._append_log(f"{name} started @ {ts}")
        # Invoke ICE Dispatcher
        try:
            self.lfc_prx.modifiedkeyword(name, "1", None)
        except Exception as e:
            self._append_log(f"[ERROR] dispatch {name}: {e}")
        self.yes_button.config(state="disabled")
        self.no_button.config(state="disabled")

    def cancel_action(self):
        self.pending_action = None
        self.confirm_label.config(text="")
        for b in self.control_buttons:
            b.config(state="normal")
        self.yes_button.config(state="disabled")
        self.no_button.config(state="disabled")

    def _append_log(self, text):
        if self.log_listbox.size() >= 10:
            self.log_listbox.delete(0)
        self.log_listbox.insert(tk.END, text)
        self.log_listbox.yview_moveto(1.0)

    def update_indicators(self):
        # 0) Current Status via ICE
        if not self.pending_action:
            try:
                st = self.lfc_prx.receive("LFC_CHECK_STATUS", None)
            except:
                st = "--"
            self.current_status_label.config(text=st)

        # 1) Update each indicator via ICE receive()
        for kw, _ in self.status_items:
            try:
                val = int(self.lfc_prx.receive(kw, None))
            except:
                val = None
            c, oid = self.indicator_ids[kw]
            if kw == "LFC_TEMP_MONITOR":
                color = "green" if val == 1 else "red"
            else:
                color = "green" if val == 0 else "red"
            c.itemconfig(oid, fill=color)

        # 2) Repetition Rate
        try:
            rr = int(self.lfc_prx.receive("REPETITION_RATE", None))
            self.rr_label.config(text=f"{rr} GHz")
        except:
            self.rr_label.config(text="--")

        # 3) Last Update
        self.last_update_label.config(
            text=datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        )

        # 4) MiniComb Trace
        for w in self.trace_frame.winfo_children():
            w.destroy()
        try:
            osa = Agilent_86142B()
            osa.connect(); osa.Run()
            wl, pw = osa.get_trace('A', plot=False)
            osa.disconnect()
            fig = plt.Figure(figsize=(4,3), dpi=100)
            ax = fig.add_subplot(111)
            ax.plot(wl, pw); ax.set_ylim(-75,0)
            canvas = FigureCanvasTkAgg(fig, master=self.trace_frame)
            canvas.get_tk_widget().pack(fill="both", expand=True)
        except:
            ttk.Label(self.trace_frame, text="Trace unavailable").pack()

        # 5) Enable control buttons after first update
        if not self.first_update_done:
            for b in self.control_buttons:
                b.config(state="normal")
            self.first_update_done = True

        # Schedule next update
        self.root.after(self.poll_interval, self.update_indicators)

    def on_close(self):
        # Shutdown ICE client then destroy GUI
        self.client_comm.shutdown()
        self.root.destroy()

# ----------------------------------------------------------------------
# 3) Main entry: start ICE server + GUI client concurrently
# ----------------------------------------------------------------------
if __name__ == "__main__":
    # 3.1 Start ICE server in background
    ice_thread = threading.Thread(target=run_ice_server, daemon=True)
    ice_thread.start()
    time.sleep(0.5)  # Wait for server to initialize

    # 3.2 Initialize ICE client proxy
    client_comm = Ice.initialize(sys.argv)
    base = client_comm.stringToProxy("lfc:default -p 10000")
    lfc_prx = CombIce.LfcPrx.checkedCast(base)
    if not lfc_prx:
        print("Failed to obtain LfcPrx, please check dispatcher address")
        sys.exit(1)

    # 3.3 Launch Tkinter GUI
    root = tk.Tk()
    app  = LfcMonitorGUI(root, lfc_prx, client_comm)
    root.protocol("WM_DELETE_WINDOW", app.on_close)
    root.mainloop()

    print("GUI closed, ICE client has exited.")

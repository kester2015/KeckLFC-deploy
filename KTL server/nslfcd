#! /kroot/rel/default/bin/kpython3
#
# kpython safely sets RELDIR, KROOT, LROOT, and PYTHONPATH before invoking
# the actual Python interpreter.

#
# #
# Required libraries.
# #
#


import os
import atexit
import configparser
import DFW                  # provided by kroot/util/dfw
import getopt
import ktl                  # provided by kroot/ktl/keyword/python
import logging
import signal
import subprocess
import sys
import threading
import time

# Load ICE
import Ice, IcePy

Ice.loadSlice('/kroot/src/kss/astrocomb/KtlIce.ice')
import Demo
         
 
def main ():

    
    parseCommandLine ()     # Need to know where the config file is.
    parseConfigFile ()
    parseCommandLine ()     # Parse the command line again, so that it
                            # overwrites options set by the config file.
                            # This feature is not currently used.

    checkSanity ()
    

    # Set handlers to shut down cleanly in all situations.

    atexit.register (shutdown)
    signal.signal (signal.SIGINT, shutdown)
    signal.signal (signal.SIGTERM, shutdown)


    # Start up our KTL backend.

    main.Service = DFW.Service (main.config.get ('main', 'service'),
                main.config.get ('main', 'stdiosvc'),
                setupKeywords)


    status = "DISP%dSTA" % (main.dispatcher)
    main.Service[status].set ('ready')

    icestatus = 'ICESTA'
    main.Service[icestatus].set('Initializing')
    


    while main.shutdown.isSet() == False:
        
        # First try to connect to ICE
        try:
            # While ICE is set to "Initializing"
            while main.Service[icestatus].value == '3':
                
                print('ICE connection initialized. Start connection ...')
                                
                # Connect to ICE server
                with Ice.initialize(main.client.clientconfig) as communicator:
                    main.Service[icestatus].set('Connected') # change the state to "Connected"
                    print('ICE status changed to "connected"')
                    
                    # Run the communicator. It runs while the ice state is "Connected"                        
                    main.client.run(communicator)
                        

                # ICE disconnected
                print('ICE communicator disconnected')
                main.Service[icestatus].set('Disconnected')
                                
                # If server is OFF or keyword icesta is set to "Disconnected", run without ICE
                print('Dispatcher running without ICE')

        except:
            
            try: 
                main.shutdown.wait(300)
            except (KeyboardInterrupt, SystemExit):
                break
            

## End of Main



main.config = configparser.ConfigParser ()
main.config_file = None
main.dispatcher = 1
main.client = None
main.Service = None
main.shutdown = threading.Event ()
main.version = '$Revision: 91165 $'.split ()[1]


def shutdown (*ignored):
    print('Shutting down')
    main.shutdown.set ()
    

    if main.Service != None:
        status = "DISP%dSTA" % (main.dispatcher)
        main.Service[status].set ('shutting down')
        main.Service.shutdown ()
        main.Service = None
    
    ######## shut down ICE
    if main.client != None:
            
        try:
            main.client.twoway = None

        except:
            pass
        main.client = None
        

#
# #
# Functions related to setting up keywords
# #
#

# Each keyword needs a new function: a function to connect to ICE
# and needs to communicate with the LFC laptop when keyword read is invoked.
# When running setupKeywords, the functions below are defined as
# methods of the keywords.


def iceconnect(self):
    ''' Function that connects keyword to ICE '''
    keyword = ktl.cache('nslfc', self.name) 
    keyword.monitor()

    # Exceptionally, ICESTA uses the specific callback function.
    if self.name == 'ICESTA':
        keyword.callback(self.iceclient.callbackfunc)
                            

def read(self):
    ''' When reading the keyword value, communicate with the LFC laptop to get tha value '''
    try:
        value = self.iceclient.getvalue(self.name)

    except Exception as e:
        print(e)

    return str(value)


def write(self, value):
    ''' Just a print function for debugging '''
    print('keyword write function called in write() method. writing the value ', value)
    # value = str(keyword['binary'])
    #print('callbackfunc value',value) 
    # Communicate with the server that the keyword value changed.

    # Exceptionally, ICESTA is related to ICE connection but does not receive keyword values
    # from the Windows machine.
    if self.name != 'ICESTA':
        self.iceclient.twoway.modifiedkeyword(self.name, value)
        self.speedUp() # after keyword read, increase the polling rate.
    

def postwrite(self, value):
    print('in postwrite, input value', value) 

    # time.sleep(1) # no longer need time delay
    if self.name != 'ICESTA': 
        self.update() # keyword read after write

    if self.name == 'ICESTA':
        print('ICESTA value', value)
        self.set(value)


def speedUp(self, checks=2):
    print(self.name, 'speeding up ...')
    self.rapid_checks = checks
    self.period(self.fast_period)

def slowDown(self):
    print(self.name, 'slowing down ...')
    self.rapid_checks -= 1
    self.period(self.slow_period)

def update(self, *args, **kwargs):

    print("update() called for",self.name,"rapid_checks=%d" % self.rapid_checks)
    
    slow_down = False
    if self.rapid_checks == 1:
        slow_down = True
    elif self.rapid_checks > 1:
        self.rapid_checks -= 1

    self.preread()
    value = self.read()

    if value is not None:
        self.postread(value)

    if slow_down:
        self.slowDown()

# A function that parses an xml file and returns keyword names and types.
# we may need a better way to do this

import xml.etree.ElementTree as ET
def parse_xml(xmlfile):
    ''' Parse keyword xml file '''
    tree = ET.parse(xmlfile)
    root = tree.getroot()

    keyword_names = []
    keyword_types = []
    keyword_readperiods = []
    keyword_fastreadperiods = []

    for keyword in root.findall('keyword'):
        name = keyword.find('name').text
        keyword_type = keyword.find('type').text

        # keyword-specific periods
        try:
            keyword_readperiod = float(keyword.find('period').text)
        except:
            keyword_readperiod = 10

        # keyword-specific fast periods
        try:
            keyword_fastreadperiod = float(keyword.find('fastperiod').text)
        except:
            keyword_fastreadperiod = 3
        print('Parsed keyword: name=%s\ttype=%s\tperiod=%.1f\tfast-period=%.1f' % (name, keyword_type, keyword_readperiod, keyword_fastreadperiod))
        keyword_names.append(name)
        keyword_types.append(keyword_type)
        keyword_readperiods.append(keyword_readperiod)
        keyword_fastreadperiods.append(keyword_fastreadperiod)

    return keyword_names, keyword_types, keyword_readperiods, keyword_fastreadperiods


# setupKeywords

def setupKeywords (service):

    dispatcher = main.dispatcher

    prefix = 'DISP' + str (dispatcher)
    DFW.Keyword.Enumerated (prefix + 'STA', service, 'initializing')
    StopKeyword (prefix + 'STOP', service, False)
    DFW.Keyword.String (prefix + 'VER', service, main.version)
    DFW.Keyword.Integer('ICENCALL',service, 0)

    # Start Ice service first
    client = IceClient()
    print('ICE client defined\n\n')
    
    main.client = client
    
    # For now, using the xml file for convenience. 
    keyword_names, keyword_types, keyword_readperiods, keyword_fastreadperiods = parse_xml('/kroot/src/kss/astrocomb/ktlxml/LFCm.xml.sin')

    base_classes = [DFW.Keyword.Integer, 
                    DFW.Keyword.Enumerated, 
                    DFW.Keyword.String, 
                    DFW.Keyword.Boolean,
                    DFW.Keyword.Double,
                    DFW.Keyword.DoubleArray
                    ]

    subclasses = {}

    for base_class in base_classes:
        
        # define the methods
        base_class.iceconnect = iceconnect
        base_class.read = read
        base_class.postwrite= postwrite 
        base_class.write = write
        base_class.update = update
        base_class.slowDown = slowDown
        base_class.speedUp = speedUp

        class_name = base_class.__name__+'Ice'
        subclass = type(class_name, (base_class,), {})
        subclasses[class_name] = subclass

    for (key, typ, p, fp) in zip(keyword_names, keyword_types, keyword_readperiods, keyword_fastreadperiods):
        if typ == 'integer': subclass = subclasses['IntegerIce']
        elif typ == 'double': subclass = subclasses['DoubleIce']
        elif typ == 'enumerated': subclass = subclasses['EnumeratedIce']
        elif typ == 'string': subclass = subclasses['StringIce']
        elif typ == 'boolean': subclass = subclasses['BooleanIce']
        elif typ == 'double array': subclass = subclasses['DoubleArrayIce']
        else:
            print('Unrecognized type')
        
        # setup keyword. The period is set to 1 sec for every keyword for now.
        subclass(key, service, period=p)
        # define iceclient
        subclass.iceclient = client

        # define poll rates
        subclass.slow_period = p
        subclass.fast_period = fp
        subclass.rapid_checks = 1 # Start with initial rapid check
    

#
# #
# ICE classes.
# #
#


            
class IceClient:
    
    # ICE Client class.

    def __init__(self):
        
        # Setup Ice communication
        self.clientconfig = '/kroot/src/kss/astrocomb/config.client' #
  
    
    def getvalue(self, name):
        ''' This function is called when keyword value is read '''
        value = self.twoway.receive(name)
        #print('getvalue called,',name,value)        
        return value
        
    def callbackfunc(self, keyword):
        ''' This function is called when keyword value is changed '''
        #print('callbackfunc called for keyword',keyword) 
        # KTL callback function
        if keyword['populated'] == False:         
            return

        try:

            value = str(keyword['binary'])
            self.twoway.modifiedkeyword(keyword['name'], value)

        except:
            print('Error in callbackfunc')
            return
        
            
        
        
    def run(self, communicator):
    
        import Demo, time
        
        print('start running ice')
        
        # Establish the connection
        self.twoway = Demo.LfcPrx.checkedCast(
        communicator.propertyToProxy('Lfc.Proxy').ice_twoway().ice_secure(False))
        
        print('established connection')
        
        # It may take some time for the dispatcher to start running.
        # Wait for 3 seconds before trying to make connection with ICE.
        
        time.sleep(3)
        print('ICE connection starts')
                
        # Get the keyword list to monitor from the ICE server 
        keylist = self.twoway.keylist()
        print('ICE is monitoring keywords:', keylist)
        

        try:
            
            for k in keylist: 
                try:
                    main.Service[k].iceconnect()
                    print('Keyword %s connected to ICE' % k)
                except Exception as e:
                    print('Keyword %s is not connected to ICE' % k)
                    print('error: ', e)
                    
                    
            # while ICE status is set to "Connected"
            while main.Service['ICESTA'].value == '1': 
                
                try:
                    time.sleep(3)
                    
                except (KeyboardInterrupt, SystemExit):
                    print("some interruption??")
                    break
            print("ICESTA not connected ??")
            
            
        except:
            print('ICE status is set to disconnected (message from communicator.run)')
            return
        

    
#
# #
# Helper functions.
# #
#

def usage (verbose=False):
    ''' How to invoke this program.
    '''

    output = "Usage: %s -c config_file [options]" % (sys.argv[0])

    if verbose == False:
        print (output)
        return

    output = output + '''

Required flags:

    -c filename         Overall configuration file location
    --config=filename       Default: None

Optional flags:

    -h,-?            Print verbose help (this output)
    --help
'''

    print (output)



class StopKeyword (DFW.Keyword.Boolean):

    def write (self, value):

        if value == '1':
            main.shutdown.set ()

# end of class StopKeyword


def parseCommandLine ():

    executable = sys.argv[0]
    arguments = sys.argv[1:]

    if len (arguments) == 0:
        help = True
    else:
        help = False

    flags = '?c:h'
    long_options = ('config=', 'help')

    options, arguments = getopt.gnu_getopt (arguments, flags, long_options)


    for option, value in options:

        if option == '-?' or option == '-h' or option == '--help':
            help = True

        elif option == '-c' or option == '--config':
            main.config_file = validateFile (value)


    if help == True:
        usage (verbose=True)
        sys.exit (0)



def parseConfigFile ():

    if main.config_file is None:
        return

    main.config.read (main.config_file)

    dispatcher = main.config.get ('main', 'dispatcher')
    (service, dispatch, number) = dispatcher.split ('_')
    main.dispatcher = int (number)



def checkSanity ():
    ''' Raise exceptions if something is wrong with the runtime
        configuration, as specified by the configuration file and
        on the command line.
    '''

    if main.config_file is None:
        raise ValueError ('no configuration file specified')

    sections = ('main',)

    for section in sections:

        if main.config.has_section (section):
            pass
        else:
            raise configparser.NoSectionError ("[%s]" % (section))


    main.config.get ('main', 'service')
    main.config.get ('main', 'stdiosvc')



def validateFile (filename):

    if os.path.isabs (filename):
        pass
    else:
        filename = os.path.abspath (filename)

    if os.path.isfile (filename):
        pass
    else:
        raise ValueError ("file does not exist: '%s'" % (filename))

    return filename
    



#
# #
# Execute the main() function defined at the head of the file.
# #
#

if __name__ == '__main__':
   
    main ()

